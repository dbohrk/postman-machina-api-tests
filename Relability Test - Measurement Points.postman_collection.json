{
	"info": {
		"_postman_id": "b2860c4c-5237-45a1-976a-0ae23db18b8b",
		"name": "Relability Test - Measurement Points",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "KeysAPI Tests",
			"item": [
				{
					"name": "KNS: Get Tenant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Save Tenant ID",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"tenantID\", jsonData.answers.tenantid);",
									"// console.log(pm.environment.get(\"tenantID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2.4/kns/keyspaces/{{keyspace}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"kns",
								"keyspaces",
								"{{keyspace}}"
							]
						},
						"description": "KNS documentation: https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/kns/keyspace.md?at=refs%2Fheads%2Fdevelop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: BearerToken: Create Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"ref\": \"{{keyRef}}\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: BasicAuth: Create Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"ref\": \"{{keyRef}}\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/Immutable and Mutable Attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"ref\": \"{{keyRef}}\",\n                \"ClientAttrs\": \"NONE\",\n                \"MutableAttrs\": \"NONE\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop\n\nConditional Protection:\n- lwop = prefer (Immutable ClientAttrs)\n- need to add 'allow' and 'always'"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/External ID (attrubutes)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"",
									"// encode the keyRef for External ID",
									"pm.environment.set(\"externalId\", btoa(pm.environment.get(\"keyRef\")));",
									"// print encoded string",
									"console.log(pm.environment.get(\"externalId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"ref\": \"{{keyRef}}\",\n                \"qty\": 1,\n                \"attributes\": {\n                        \"ionic-external-id\": [\"{{externalId}}\"\n                    ]\n                }\n            },\n            {\n                \"ref\": \"{{keyRef}}+1\",\n                \"qty\": 1,\n                \"attributes\": {\n                    \"classification\": [\n                        \"proprietary\"\n                    ],\n                    \"map\": {\n                        \"val\": \"local\"\n                    }\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/External ID (cattrs)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"",
									"// encode the keyRef for External ID",
									"pm.environment.set(\"externalId\", btoa(pm.environment.get(\"keyRef\")));",
									"// print encoded string",
									"console.log(pm.environment.get(\"externalId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"ref\": \"{{keyRef}}\",\n                \"qty\": 1,\n                \"attributes\": {\n                        \"ionic-external-id\": [\"{{externalId}}\"\n                    ]\n                }\n            },\n            {\n                \"ref\": \"{{keyRef}}+1\",\n                \"qty\": 1,\n                \"attributes\": {\n                    \"classification\": [\n                        \"proprietary\"\n                    ],\n                    \"map\": {\n                        \"val\": \"local\"\n                    }\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/External ID Hardcoded ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"",
									"// encode the keyRef for External ID",
									"pm.environment.set(\"externalId\", btoa(pm.environment.get(\"keyRef\")));",
									"// print encoded string",
									"console.log(pm.environment.get(\"externalId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"ref\": \"{{keyRef}}\",\n                \"qty\": 1,\n                \"attributes\": {\n                        \"ionic-external-id\": [\"{{externalId}}\"\n                    ]\n                }\n            },\n            {\n                \"ref\": \"{{keyRef}}+1\",\n                \"qty\": 1,\n                \"attributes\": {\n                    \"classification\": [\n                        \"proprietary\"\n                    ],\n                    \"map\": {\n                        \"val\": \"local\"\n                    }\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/Embargo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"// Format date into YYYYMMDD",
									"var x = new Date();",
									"var y = x.getFullYear().toString();",
									"var m = (x.getMonth() + 1).toString();",
									"var d = x.getDate().toString();",
									"// Pad day and month to two digits if only one digit",
									"(d.length == 1) && (d = '0' + d);",
									"(m.length == 1) && (m = '0' + m);",
									"// Set formating with '-' to seperate date and time.",
									"// Set time to midnight 00:00",
									"var yyyymmdd = y + '-' + m + '-' + d + 'T' + '00:00:00Z';",
									"pm.environment.set(\"embargoDate\", yyyymmdd);",
									"// console.log(yyyymmdd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"attributes\": {\n                    \"ionic-embargo\": \"embargoDate\"\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/Expire",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"// Format date into YYYYMMDD",
									"var x = new Date();",
									"var y = x.getFullYear().toString();",
									"var m = (x.getMonth() + 1).toString();",
									"var d = x.getDate().toString();",
									"// Pad day and month to two digits if only one digit",
									"(d.length == 1) && (d = '0' + d);",
									"(m.length == 1) && (m = '0' + m);",
									"// Set formating with '-' to seperate date and time.",
									"// Set time to midnight 00:00",
									"var yyyymmdd = y + '-' + m + '-' + d + 'T' + '00:00:00Z';",
									"pm.environment.set(\"embargoDate\", yyyymmdd);",
									"// console.log(yyyymmdd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"attributes\": {\n                    \"ionic-embargo\": \"embargoDate\"\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/Obligations (Offilne=true, Contidional=allow,labeling=false)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"// Format date into YYYYMMDD",
									"var x = new Date();",
									"var y = x.getFullYear().toString();",
									"var m = (x.getMonth() + 1).toString();",
									"var d = x.getDate().toString();",
									"// Pad day and month to two digits if only one digit",
									"(d.length == 1) && (d = '0' + d);",
									"(m.length == 1) && (m = '0' + m);",
									"// Set formating with '-' to seperate date and time.",
									"// Set time to midnight 00:00",
									"var yyyymmdd = y + '-' + m + '-' + d + 'T' + '00:00:00Z';",
									"pm.environment.set(\"embargoDate\", yyyymmdd);",
									"// console.log(yyyymmdd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"attributes\": {\n                    \"ionic-embargo\": \"{{embargoDate}}\",\n                    \"ionic-expire\": \"{{embargoDate}}\",\n                    \"obligations\": {\n                        \"ionic-content-encrypt\": [\n                            \"allow\"\n                        ],\n                        \"ionic-offline-duration-seconds\": [\n                            \"3782520\"\n                        ],\n                        \"ionic-offline-enabled\": [\n                            \"true\"\n                        ],\n                        \"ionic-labeling-enabled\": [\n                            \"false\"\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "KeysAPI Documentation:\nhttps://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop\n\nObligations List:\nhttps://stash.in.ionicsecurity.com/projects/IP/repos/gyre/browse/policy/tests/testdata/obligations/list-obligations.json\n\nNOTE:\n    Obligation settings are overwirtten by Policy Obligations settings."
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/Obligations (Offilne=false, Contidional=prefer,labeling=false)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"// Format date into YYYYMMDD",
									"var x = new Date();",
									"var y = x.getFullYear().toString();",
									"var m = (x.getMonth() + 1).toString();",
									"var d = x.getDate().toString();",
									"// Pad day and month to two digits if only one digit",
									"(d.length == 1) && (d = '0' + d);",
									"(m.length == 1) && (m = '0' + m);",
									"// Set formating with '-' to seperate date and time.",
									"// Set time to midnight 00:00",
									"var yyyymmdd = y + '-' + m + '-' + d + 'T' + '00:00:00Z';",
									"pm.environment.set(\"embargoDate\", yyyymmdd);",
									"// console.log(yyyymmdd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"attributes\": {\n                    \"ionic-embargo\": \"{{embargoDate}}\",\n                    \"ionic-expire\": \"{{embargoDate}}\",\n                    \"obligations\": {\n                        \"ionic-content-encrypt\": [\n                            \"allow\"\n                        ],\n                        \"ionic-offline-duration-seconds\": [\n                            \"3782520\"\n                        ],\n                        \"ionic-offline-enabled\": [\n                            \"false\"\n                        ],\n                        \"ionic-labeling-enabled\": [\n                            \"false\"\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "KeysAPI Documentation:\nhttps://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop\n\nObligations List:\nhttps://stash.in.ionicsecurity.com/projects/IP/repos/gyre/browse/policy/tests/testdata/obligations/list-obligations.json\n\nNOTE:\n    Obligation settings are overwirtten by Policy Obligations settings."
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Create Key w/Obligations (Offilne=false, Contidional=always,labeling=true)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());",
									"// Format date into YYYYMMDD",
									"var x = new Date();",
									"var y = x.getFullYear().toString();",
									"var m = (x.getMonth() + 1).toString();",
									"var d = x.getDate().toString();",
									"// Pad day and month to two digits if only one digit",
									"(d.length == 1) && (d = '0' + d);",
									"(m.length == 1) && (m = '0' + m);",
									"// Set formating with '-' to seperate date and time.",
									"// Set time to midnight 00:00",
									"var yyyymmdd = y + '-' + m + '-' + d + 'T' + '00:00:00Z';",
									"pm.environment.set(\"embargoDate\", yyyymmdd);",
									"// console.log(yyyymmdd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Remove '-' in protection-keys because of (apparent) parsing issue",
									"var strippedResponse = responseBody.replace (\"protection-keys\", \"protectionKeys\");",
									"var jsonData = JSON.parse(strippedResponse);",
									"",
									"pm.environment.set(\"keyId\", jsonData.data.protectionKeys[0].id);",
									"",
									"// console.log(pm.environment.get(\"keyId\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|713c456c-04b8-4407-596d-969dc468c38b|{{keyspace}}|1424977567501|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            {\n                \"qty\": 1,\n                \"attributes\": {\n                    \"ionic-embargo\": \"{{embargoDate}}\",\n                    \"ionic-expire\": \"{{embargoDate}}\",\n                    \"obligations\": {\n                        \"ionic-content-encrypt\": [\n                            \"allow\"\n                        ],\n                        \"ionic-offline-duration-seconds\": [\n                            \"3782520\"\n                        ],\n                        \"ionic-offline-enabled\": [\n                            \"false\"\n                        ],\n                        \"ionic-labeling-enabled\": [\n                            \"false\"\n                        ]\n                    }\n                }\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"create"
							]
						},
						"description": "KeysAPI Documentation:\nhttps://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop\n\nObligations List:\nhttps://stash.in.ionicsecurity.com/projects/IP/repos/gyre/browse/policy/tests/testdata/obligations/list-obligations.json\n\nNOTE:\n    Obligation settings are overwirtten by Policy Obligations settings."
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Fetch Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|60bd0ef6-5701-4311-6ff7-cb1230ef565a|INUp|1611354545121|2.4.0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [\n            \"{{keyId}}\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/fetch",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"fetch"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				},
				{
					"name": "Device: KeysAPI: Fetch Key w/External ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Policy ID",
									"pm.environment.set(\"keyRef\", 'Daves Key Request - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-CONVERSATION-ID",
								"type": "text",
								"value": "CID|NONVBE|60bd0ef6-5701-4311-6ff7-cb1230ef565a|INUp|1611354545121|2.4.0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"protection-keys\": [],\n        \"protection-key-queries\": {\n            \"qref1\": {\n                \"ionic-external-id\": \"{{externalId}}\"\n            },\n            \"qref2\": {\n                \"ionic-external-id\": \"{{keyRef}}\"\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/fetch",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2.4",
								"{{keyspace}}",
								"keys",
								"fetch"
							]
						},
						"description": "https://stash.in.ionicsecurity.com/projects/DOC/repos/api-spec/browse/v2.4/keysapi?at=develop"
					},
					"response": []
				}
			]
		},
		{
			"name": "SCIM Tests",
			"item": [
				{
					"name": "SCIM: List Scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Scopes",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Scopes"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-scopes"
					},
					"response": []
				},
				{
					"name": "SCIM: List Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.Resources[0].id)",
									"pm.environment.set(\"deviceID\", jsonData.Resources[0].id);",
									"console.log(pm.environment.get(\"deviceID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Devices",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCIM: Fetch Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Devices/{{deviceID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Devices",
								"{{deviceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCIM: List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.Resources[0].id)",
									"pm.environment.set(\"userID\", jsonData.Resources[0].id);",
									"console.log(pm.environment.get(\"userID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Users",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Users"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: Fetch User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Users/{{userID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Users",
								"{{userID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: Create Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.Resources[0].id)",
									"pm.environment.set(\"groupID\", jsonData.Resources[0].id);",
									"console.log(pm.environment.get(\"groupID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"groupName\", 'Group - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"externalId\": \"{{groupName}}\",\n  \"displayName\": \"{{groupName}}\",\n  \"urn:scim:schemas:extension:ionic:1.0\": {\n    \"description\": \"Group created for testing\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Groups",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Groups"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: Update Group w/Put (add member)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"groupName\", 'Group - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"displayName\": \"{{groupDisplayName}}\",\n    \"members\": [\n        {\n            \"value\": \"{{userID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Groups/{{groupID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Groups",
								"{{groupID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: Update Group w/Patch (add member)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 204",
									"// PATCH does not return contect. Use PUT is content return is required.",
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"groupName\", 'Group - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"{{groupDisplayName}}\",\n    \"members\": [\n        {\n            \"value\": \"{{userID}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Groups/{{groupID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Groups",
								"{{groupID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: List Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.Resources[0].id)",
									"pm.environment.set(\"groupID\", jsonData.Resources[0].id);",
									"console.log(pm.environment.get(\"groupID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Groups",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Groups"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: Fetch Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Groups/{{groupID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Groups",
								"{{groupID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: List Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.Resources[0].id)",
									"pm.environment.set(\"roleID\", jsonData.Resources[0].id);",
									"console.log(pm.environment.get(\"roleID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Roles",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Roles"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "SCIM: Fetch Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Roles/{{roleID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Roles",
								"{{roleID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Marking Tests",
			"item": [
				{
					"name": "Data Markings: Create Data Marking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 201",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"console.log(jsonData.id)",
									"pm.environment.set(\"markingID\", jsonData.id);",
									"console.log(pm.environment.get(\"markingID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"markingName\", 'Custom Data Marking - ' + new Date().toISOString());",
									"",
									"",
									"/*",
									"//",
									"// This was the former method incementing a counter to make a unique value",
									"// May be useful in other Pre-request scripts",
									"//",
									"// Use dataMarkingCount to store the Data Marking number",
									"dataMarkingCount = pm.environment.get(\"dataMarkingCount\");",
									"// Check if dataMarkingCount is already defined ",
									"if (dataMarkingCount) {",
									"    dataMarkingCount++; // increment",
									"} else {",
									"    dataMarkingCount = 1; // start from 1",
									"}",
									"",
									"// Build and Store Data Marking Name",
									"currentDataMarkingName = pm.environment.get(\"dataMarkingName\") + dataMarkingCount;",
									"pm.environment.set(\"currentDataMarkingName\", currentDataMarkingName);",
									"// Store current count",
									"pm.environment.set(\"dataMarkingCount\", dataMarkingCount);",
									"",
									"// console.log(\"Current Data Marking Name:\" + pm.environment.get(\"currentDataMarkingName\"));",
									"// console.log(\"Data Marking Count: \" + pm.environment.get(\"dataMarkingCount\"));",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{markingName}}\",\n    \"public\": true,\n    \"adminOnly\": true,\n    \"defaultValue\": \"important\",\n    \"detail\": {\n        \"dataType\": \"string\",\n        \"description\": \"Custom corporate marking.\",\n        \"values\": [\n            {\n                \"description\": \"An important item\",\n                \"name\": \"important\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/markings",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"markings"
							],
							"query": [
								{
									"key": "name",
									"value": "",
									"description": "Return markings that match by name. 'or' can be used",
									"disabled": true
								},
								{
									"key": "public",
									"value": "",
									"description": "If true, return markings that are flagged as public and visible to Ionic clients.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Data Markings: List Data Markings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.Resources[0].id)",
									"pm.environment.set(\"markingID\", jsonData.Resources[0].id);",
									"console.log(pm.environment.get(\"markingID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/markings?limit=1&skip=0",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"markings"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "name",
									"value": "",
									"description": "Return markings that match by name. 'or' can be used",
									"disabled": true
								},
								{
									"key": "public",
									"value": "",
									"description": "If true, return markings that are flagged as public and visible to Ionic clients.",
									"disabled": true
								}
							]
						},
						"description": "https://dev.ionic.com/api/markings/list-data-markings"
					},
					"response": []
				},
				{
					"name": "Data Markings: Fetch Data Marking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/scim/Roles/{{roleID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"scim",
								"Roles",
								"{{roleID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				},
				{
					"name": "Data Markings: Delete Data Marking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 204",
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/markings/{{markingID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"markings",
								"{{markingID}}"
							]
						},
						"description": "https://dev.ionic.com/api/scim/list-users"
					},
					"response": []
				}
			]
		},
		{
			"name": "Policy Tests",
			"item": [
				{
					"name": "Policies: Create Policy (Allow Access for Data Creator)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.id)",
									"// NOTE: The text name used to Create the Policy in policyID is overwritten",
									"// with the id number of the created Policy becuase they use the same identifer",
									"pm.environment.set(\"policyID\", jsonData.id);",
									"console.log(pm.environment.get(\"policyID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"policyID\", 'Allow All Policy - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Published\",\n    \"enabled\": true,\n    \"policyId\": \"{{policyID}}\",\n    \"description\": \"All data.\",\n    \"ruleCombiningAlgId\": \"deny-overrides\",\n    \"rules\": [\n        {\n            \"ruleId\": \"0ec5\",\n            \"effect\": \"Permit\",\n            \"description\": \"Allow access when user is the data creator.\",\n            \"condition\": {\n                \"functionId\": \"string-equal\",\n                \"args\": [\n                    {\n                        \"category\": \"resource\",\n                        \"id\": \"created-user-id\"\n                    },\n                    {\n                        \"category\": \"subject\",\n                        \"id\": \"subject-id\"\n                    }\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Update Policy (Allow Access for Data Creator)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 204",
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Published\",\n    \"enabled\": true,\n    \"policyId\": \"Updated Policy\",\n    \"description\": \"All data.\",\n    \"ruleCombiningAlgId\": \"deny-overrides\",\n    \"rules\": [\n        {\n            \"ruleId\": \"0ec5\",\n            \"effect\": \"Permit\",\n            \"description\": \"UPDATED: Allow access when user is the data creator.\",\n            \"condition\": {\n                \"functionId\": \"string-equal\",\n                \"args\": [\n                    {\n                        \"category\": \"resource\",\n                        \"id\": \"created-user-id\"\n                    },\n                    {\n                        \"category\": \"subject\",\n                        \"id\": \"subject-id\"\n                    }\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies/{{policyID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies",
								"{{policyID}}"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Create Policy (With Obligations)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.id)",
									"// NOTE: The text name used to Create the Policy in policyID is overwritten",
									"// with the id number of the created Policy becuase they use the same identifer",
									"pm.environment.set(\"policyID\", jsonData.id);",
									"console.log(pm.environment.get(\"policyID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"policyID\", 'Obligations Policy - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Published\",\n    \"enabled\": true,\n    \"policyId\": \"{{policyID}}\",\n    \"description\": \"{{policyID}}.\",\n    \"ruleCombiningAlgId\": \"deny-overrides\",\n    \"target\": {\n        \"condition\": {\n            \"functionId\": \"string-at-least-one-member-of\",\n            \"args\": [\n                {\n                    \"dataType\": \"string\",\n                    \"value\": [\n                        \"{{policyID}}\"\n                    ]\n                },\n                {\n                    \"category\": \"resource\",\n                    \"id\": \"{{policyID}}\"\n                }\n            ]\n        }\n    },\n    \"rules\": null,\n    \"obligationExpressions\": [\n        {\n            \"obligationId\": \"offline-key-storage\",\n            \"appliesTo\": \"Permit\",\n            \"attributes\": [\n                {\n                    \"id\": \"ionic-offline-enabled\",\n                    \"attributeValue\": {\n                        \"dataType\": \"string\",\n                        \"value\": \"true\"\n                    }\n                },\n                {\n                    \"id\": \"ionic-offline-duration-seconds\",\n                    \"attributeValue\": {\n                        \"dataType\": \"integer\",\n                        \"value\": 3717720\n                    }\n                }\n            ]\n        },\n        {\n            \"obligationId\": \"conditional-protection\",\n            \"appliesTo\": \"Permit\",\n            \"attributes\": [\n                {\n                    \"id\": \"ionic-content-encrypt\",\n                    \"attributeValue\": {\n                        \"dataType\": \"string\",\n                        \"value\": \"always\"\n                    }\n                }\n            ]\n        },\n        {\n            \"obligationId\": \"labeling\",\n            \"appliesTo\": \"Permit\",\n            \"attributes\": [\n                {\n                    \"id\": \"ionic-labeling-enabled\",\n                    \"attributeValue\": {\n                        \"dataType\": \"string\",\n                        \"value\": \"true\"\n                    }\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Update Policy (With Obligations)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 204",
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Published\",\n    \"enabled\": true,\n    \"policyId\": \"Updated Policy\",\n    \"description\": \"All data.\",\n    \"ruleCombiningAlgId\": \"deny-overrides\",\n    \"rules\": [\n        {\n            \"ruleId\": \"0ec5\",\n            \"effect\": \"Permit\",\n            \"description\": \"UPDATED: Allow access when user is the data creator.\",\n            \"condition\": {\n                \"functionId\": \"string-equal\",\n                \"args\": [\n                    {\n                        \"category\": \"resource\",\n                        \"id\": \"created-user-id\"\n                    },\n                    {\n                        \"category\": \"subject\",\n                        \"id\": \"subject-id\"\n                    }\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies/{{policyID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies",
								"{{policyID}}"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: List Policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Fetch Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 204",
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies/{{policyID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies",
								"{{policyID}}"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Delete Poicy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 204",
									"pm.test(\"Status code is 204\", () => {",
									"  pm.response.to.have.status(204);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies/{{policyID}}",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies",
								"{{policyID}}"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Create Policy (location-country)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.id)",
									"// NOTE: The text name used to Create the Policy in policyID is overwritten",
									"// with the id number of the created Policy becuase they use the same identifer",
									"pm.environment.set(\"policyID\", jsonData.id);",
									"console.log(pm.environment.get(\"policyID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"policyID\", ' - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Published\",\n    \"enabled\": true,\n    \"policyId\": \"Policy Decision by location-country {{policyID}}\",\n    \"description\": \"All data.\",\n    \"ruleCombiningAlgId\": \"deny-overrides\",\n    \"rules\": [\n        {\n            \"ruleId\": \"f10a\",\n            \"effect\": \"Permit\",\n            \"description\": \"Allow access when user is not in the location Antartica.\",\n            \"condition\": {\n                \"functionId\": \"not\",\n                \"args\": [\n                    {\n                        \"functionId\": \"string-at-least-one-member-of\",\n                        \"args\": [\n                            {\n                                \"category\": \"environment\",\n                                \"id\": \"location-country\"\n                            },\n                            {\n                                \"dataType\": \"string\",\n                                \"value\": [\n                                    \"ATA\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Keyless Decision (location-city)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"created-group-name\" : [\"TEST 2\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/keyless",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"keyless"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Create Policy (group membership)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// console.log(jsonData.id)",
									"// NOTE: The text name used to Create the Policy in policyID is overwritten",
									"// with the id number of the created Policy becuase they use the same identifer",
									"pm.environment.set(\"policyID\", jsonData.id);",
									"console.log(pm.environment.get(\"policyID\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Use current date and time to crate a unique Data Marking Name",
									"pm.environment.set(\"policyID\", ' - ' + new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"Published\",\n    \"enabled\": true,\n    \"policyId\": \"Policy Decision by location-country {{policyID}}\",\n    \"description\": \"All data.\",\n    \"ruleCombiningAlgId\": \"deny-overrides\",\n    \"rules\": [\n        {\n            \"ruleId\": \"f10a\",\n            \"effect\": \"Permit\",\n            \"description\": \"Allow access when user is not in the location Antartica.\",\n            \"condition\": {\n                \"functionId\": \"not\",\n                \"args\": [\n                    {\n                        \"functionId\": \"string-at-least-one-member-of\",\n                        \"args\": [\n                            {\n                                \"category\": \"environment\",\n                                \"id\": \"location-country\"\n                            },\n                            {\n                                \"dataType\": \"string\",\n                                \"value\": [\n                                    \"ATA\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/policies",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"policies"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				},
				{
					"name": "Policies: Keyless Decision (group membership)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"// Verify that reponse time is below threshold",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{bearerToken}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"created-group-name\" : [\"TEST 2\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{systemURL}}/v2/{{tenantID}}/keyless",
							"protocol": "https",
							"host": [
								"{{systemURL}}"
							],
							"path": [
								"v2",
								"{{tenantID}}",
								"keyless"
							]
						},
						"description": "https://dev.ionic.com/api/policies/list-policies"
					},
					"response": []
				}
			]
		},
		{
			"name": "Download API: Download Records",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify status code is 200",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"// Verify that reponse time is below threshold",
							"pm.test(\"Response time is less than 500ms\", () => {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Format date into YYYYMMDD",
							"var x = new Date();",
							"var y = x.getFullYear().toString();",
							"var m = (x.getMonth() + 1).toString();",
							"var d = x.getDate().toString();",
							"// Pad day and month to two digits if only one digit",
							"(d.length == 1) && (d = '0' + d);",
							"(m.length == 1) && (m = '0' + m);",
							"// Set formating with '-' to seperate date and time.",
							"// Set time to midnight 00:00",
							"var yyyymmdd = y + m + d + '-00:00';",
							"pm.environment.set(\"downloadDate\", yyyymmdd);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{bearerToken}}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{systemURL}}/v2/{{tenantID}}/download?start={{downloadDate}}",
					"protocol": "https",
					"host": [
						"{{systemURL}}"
					],
					"path": [
						"v2",
						"{{tenantID}}",
						"download"
					],
					"query": [
						{
							"key": "start",
							"value": "{{downloadDate}}"
						}
					]
				},
				"description": "NOTE: This API request was previously known as \"logstore\"\n\nhttps://dev.ionic.com/api/download/download-records"
			},
			"response": []
		},
		{
			"name": "Device: KeysAPI: HMAC: Create (work in progress)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function getPath(url) {",
							"    var pathRegex = /.+?\\:\\/\\/.+?(\\/.+?)(?:#|\\?|$)/;",
							"    var result = url.match(pathRegex);",
							"    return result && result.length > 1 ? result[1] : ''; ",
							"}",
							" ",
							"function getQueryString(url) {",
							"    var arrSplit = url.split('?');",
							"    return arrSplit.length > 1 ? url.substring(url.indexOf('?')+1) : ''; ",
							"}",
							" ",
							"function getAuthHeader(httpMethod, requestUrl, requestBody) {",
							"    var CLIENT_KEY = pm.environment.get(\"hmacID\");",
							"    var SECRET_KEY = pm.environment.get(\"hmacSecret\");",
							"    var AUTH_TYPE = 'IONIC';",
							"         ",
							"    var requestPath = getPath(requestUrl);",
							"    var queryString = getQueryString(requestUrl);",
							"    if (httpMethod == 'GET' || !requestBody) {",
							"        requestBody = ''; ",
							"    } else {",
							"        requestBody = JSON.stringify(requestBody);",
							"    }   ",
							"         ",
							"    var hashedPayload = CryptoJS.enc.Hex.stringify(CryptoJS.SHA512(requestBody));",
							"    // var hashedPayload = CryptoJS.enc.Hex.stringify(CryptoJS.enc.Base64(requestBody));",
							"    console.log('requestBody', 'request body', requestBody);",
							"    console.log('hashedPayload', hashedPayload);",
							"         ",
							"    var timestamp = new Date().toISOString().split('.')[0]+\"Z\";",
							"    var requestData = [httpMethod, requestPath, queryString, timestamp, hashedPayload].join(\"\\n\");",
							"    var hashedRequestData = CryptoJS.enc.Hex.stringify(CryptoJS.SHA512(requestData));",
							"   // var hashedRequestData = CryptoJS.enc.Hex.stringify(btoa(requestData));",
							"         ",
							"    var hmacDigest = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA512(hashedRequestData, SECRET_KEY));",
							"  //  var hmacDigest = CryptoJS.enc.Hex.stringify(btoa(hashedRequestData, SECRET_KEY));",
							"  //  var authHeader = AUTH_TYPE + ' timestamp=' + timestamp + \", client=\" + CLIENT_KEY + ', signature=' + hmacDigest;",
							"    var authHeader = AUTH_TYPE + ' ' + CLIENT_KEY + ':' + hmacDigest;",
							"    return authHeader;",
							"}",
							" ",
							"postman.setEnvironmentVariable('hmacAuthHeader', getAuthHeader(request['method'], request['url'], request['data']));",
							"",
							"console.log('hmacID', pm.environment.get(\"hmacID\"));",
							"console.log('hmacSecret', pm.environment.get(\"hmacSecret\"));",
							"console.log('hmacAuthHeader', pm.environment.get(\"hmacAuthHeader\"));",
							"",
							"// Format date into Day, day MONTH year time gmt-offset",
							"/* var arr = Date().match(/\\S+/gi)",
							"console.log(arr[0] + ', ' + arr[2] + ' ' + arr[1] + ' ' + arr[3] + ' ' + arr[4] + ' ' + arr[5])",
							"console.log(arr[0]);",
							"console.log(arr[1]);",
							"console.log(arr[2]);",
							"console.log(arr[3]);",
							"console.log(arr[4]);",
							"console.log(arr[5]);",
							"console.log(arr[6]);",
							"console.log(arr[7]);",
							"console.log(Date());",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "User-Agent",
						"value": "python-requests/2.24.0"
					},
					{
						"key": "Accept",
						"value": "/"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "X-Auth-Tenant-Id",
						"value": "{{tenantID}}"
					},
					{
						"key": "X-Conversation-Id",
						"value": "CID|02f4de0f-12ee-11eb-85b9-185e0faad5a6",
						"disabled": true
					},
					{
						"key": "Content-Length",
						"value": "68"
					},
					{
						"key": "Authorization",
						"value": "IONIC 5f84a5d9f085880768ff07f5:mJimN1KElK5OQNqO+zkdWizsIznzjiQytqQAW8zubWc="
					},
					{
						"key": "Date",
						"value": "Wed Mar 10 2021 15:41:45 +0000"
					},
					{
						"key": "Content-MD5",
						"value": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json;charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"data\": {\"protection-keys\": [\n{\"qty\": 1, \"ref\": \"{{keyRef}}\"}\n]}}"
				},
				"url": {
					"raw": "https://{{systemURL}}/v2.4/{{keyspace}}/keys/create",
					"protocol": "https",
					"host": [
						"{{systemURL}}"
					],
					"path": [
						"v2.4",
						"{{keyspace}}",
						"keys",
						"create"
					]
				},
				"description": "Ionic documentation: https://dev.ionic.com/api/usage/authentication\nOriginal Postman code from: https://gist.github.com/ravikiranj/d056216c0cee8cdbbdd1336ec227d6f6"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "NWY4NGE1ZDlmMDg1ODgwNzY4ZmYwN2Y1dIiN6nLrmU69dw03DBhGLD6y14H7nKB5RzQKnoIu2Lg=",
				"type": "string"
			}
		]
	}
}